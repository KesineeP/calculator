{"version":3,"sources":["myCalculator/NumberButton.js","myCalculator/OperatorButton.js","myCalculator/Calculator.js","App.js","reportWebVitals.js","index.js"],"names":["NumberButton","name","areaName","onClickNumber","style","default","gridArea","backgroundColor","color","border","fontSize","borderRadius","zero","textAlign","paddingLeft","theStyle","className","onClick","OperatorButton","onClickOperation","numberList","lightgreyList","orangeList","Calculator","useState","value","setValue","operation","setOperation","result","setResult","display","setDisplay","percentage","setPercentage","lastButtonPressed","setLastButtonPressed","num","length","concat","calculate","valueOrPercent","numValue","parseFloat","button","toPositiveValue","sunstring","togglePositiveNegative","percent","calcPercentage","useEffect","toFixed","console","log","map","index","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a9fb0308.chunk.js","sourcesContent":["import React from 'react';\n\nexport default function NumberButton({name, areaName, onClickNumber}) {\n    const style = {\n        default: {\n        gridArea: areaName,\n        backgroundColor: \"#3b3b3b\",\n        color: \"#ffffff\",\n        border: \"1px solid #3b3b3b\",\n        fontSize: \"40px\",\n        borderRadius: \"90px\"\n        },\n        zero: {\n            textAlign: \"left\",\n            paddingLeft: \"52px\",\n            borderRadius: \"80px\"\n        }\n    };\n\n    let theStyle = style.default;\n    if(areaName === \"zero\") theStyle = {...style.default, ...style.zero}\n\n    return (\n        <button\n            style={theStyle}\n            className=\"numButton\"\n            onClick={() => onClickNumber(name)}\n        >\n            {name}\n        </button>\n    );\n}","import React from 'react'\n\n\nexport default function OperatorButton({name, color, onClickOperation}) {\n    const style = {\n        orange: {\n            backgroundColor: \"#ff9d00\",\n            color: \"#ffffff\",\n            border: \"1px solid #ff9d00\",\n            fontSize: \"40px\",\n            borderRadius: \"50%\",\n        },\n        lightgrey: {\n            backgroundColor: \"#cccccc\",\n            border: \"1px solid #cccccc\",\n            fontSize: \"40px\",\n            borderRadius: \"50%\",\n        },\n    };\n\n    let theStyle = style.lightgrey;\n    if(color === 'orange') theStyle = style.orange\n\n    return (\n    <button\n        style={theStyle}\n        className=\"operatorButton\"\n        onClick={() => onClickOperation(name)}>\n        {name}\n    </button>\n    );\n\n}","import React , { useState, useEffect } from 'react';\nimport NumberButton from './NumberButton';\nimport OperatorButton from './OperatorButton';\nimport './StyleSheet.css';\n\nconst numberList =  [\n    [\"zero\",\"0\"],\n    [\"one\",\"1\"],\n    [\"two\",\"2\"],\n    [\"three\", \"3\"],\n    [\"four\", \"4\"],\n    [\"five\", \"5\"],\n    [\"six\",\"6\"],\n    [\"seven\",\"7\"],\n    [\"eight\",\"8\"],\n    [\"nine\",\"9\"],\n    [\"dot\",\".\"]\n];\nconst lightgreyList =[\"C\", \"+/-\", \"%\"];\nconst orangeList = [\"/\", \"x\", \"-\", \"+\", \"=\"];\n\n\nconst Calculator = () => {\n    const [value, setValue] = useState(\"\");\n    const [operation, setOperation] = useState(\"\");\n    const [result, setResult] = useState(0);\n    const [display, setDisplay] = useState(value);\n    const [percentage, setPercentage] = useState(0);\n    const [lastButtonPressed, setLastButtonPressed] = useState(\"number\");\n    \n    const onClickNumber = (num) => {\n        if(num === \".\" && value[value.length - 1] === \".\") return;\n\n        if(num === \".\" && value === \"\") {\n            setValue(\"0\".concat(num));\n        } else {\n            setValue(value.concat(num));\n        }\n        setDisplay(value.concat(num));\n        setLastButtonPressed(\"number\");\n    };\n\n    const calculate = (valueOrPercent) => {\n        const numValue = parseFloat(valueOrPercent);\n        if (result === 0) {\n            setResult(numValue);\n            return;\n        }\n\n        switch (operation) {\n            case \"-\":\n                setResult(result - numValue);\n                break;\n            case \"+\":\n                setResult(result + numValue);\n                break;\n            case \"x\":\n                setResult(result * numValue);\n                break;\n            case \"/\":\n                setResult(result / numValue);\n                break;\n            case \"=\":\n                break;\n            case \"%\":\n                setResult(result);\n                break;\n            default:\n                // case \"%\"\n                setResult(numValue);\n        }\n    };\n\n    const calcPercentage = () => {\n        const percent = parseFloat(value) / 100;\n        if (result === 0) {\n            setPercentage(percent);\n        } else {\n            calculate(result * percent);\n            setPercentage(result * percent);\n        }\n    };\n\n    const togglePositiveNegative = () => {\n        if (lastButtonPressed === \"number\") {\n            if(value === \"\") {\n                setValue(\"-\");\n                setDisplay('-0');\n            } else if(value === \"-\") {\n                setValue(\"\");\n                setDisplay(\"0\");\n            } else if(value[0] === \"-\") {\n                const toPositiveValue = value.sunstring(1, value.length);\n                setValue(toPositiveValue);\n                setDisplay(toPositiveValue);\n            } else {\n                setValue('-'.concat(value));\n                setDisplay(\"-\".concat(value));\n            }\n        }else {\n            setResult(result * -1);\n        }\n    };\n\n\n    const onClickOperation = (button) => {\n        if (button === \"C\") {\n            setOperation(\"\");\n            setResult(0);\n            setDisplay(0);\n        } else if (button === \"+/-\") {\n            togglePositiveNegative();\n        } else if (button === \"%\") {\n            if (value !== \"\") calcPercentage();\n            setOperation(button);\n        } else {\n            if (value !== \"\") calculate(value);\n            setOperation(button);\n            if (button === \"=\") setDisplay(result);\n        }\n        if (button !== \"+/-\") setValue(\"\");\n        else return;\n\n        setLastButtonPressed(button === \"C\" ? \"number\" : \"operator\");\n    };\n\n    useEffect(() => {\n        if (result % 1 === 0) {\n            setDisplay(result);\n        } else {\n            setDisplay(result.toFixed(4));\n        }\n    }, [result]);\n\n    useEffect(() => {\n        if (percentage % 1 === 0) {\n            setDisplay(percentage);\n        } else {\n            setDisplay(percentage.toFixed(4));\n        }\n    }, [percentage]);\n\n      console.log(\"value\", value);\n      console.log(\"result\", result);\n      console.log(\"operation\", operation);\n      console.log(\"display\", display)\n      console.log(\"------------\");\n      return (\n        <div className=\"container\">\n            <p className=\"result\">{ display || \"0\" }</p>\n            <div className=\"lightgrey\">\n                {lightgreyList.map((name, index) =>\n                    <OperatorButton \n                    name={name} \n                    key={index} \n                    color=\"lightgrey\" \n                    onClickOperation={onClickOperation}/>\n                    )}\n\n            </div>\n            <div className=\"orange\">\n                {orangeList.map((name, index) =>\n                    <OperatorButton \n                    name={name} \n                    key={index} \n                    color=\"orange\" \n                    onClickOperation={onClickOperation}/>\n                )}\n            </div>\n            <div className=\"darkgrey\">\n                {numberList.map((num, index) =>\n                <NumberButton \n                name={num[1]} \n                areaName={num[0]} \n                key={index} \n                onClickNumber={onClickNumber} />\n                )}\n            </div>\n        </div>\n    );\n\n}\n\nexport default Calculator;","import React from 'react';\nimport './App.css';\nimport Calculator from './myCalculator/Calculator';\n\nfunction App() {\n  return (\n    <Calculator />\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}